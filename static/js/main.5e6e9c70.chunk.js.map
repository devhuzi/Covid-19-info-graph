{"version":3,"sources":["components/cards/Cards.module.css","components/cards/Cards.jsx","api/index.js","components/chart/Chart.jsx","components/countryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/chart/Chart.module.css","components/countryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","dataFetch","country","a","changAbleUrl","axios","get","console","log","dailyDataFetch","newDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","countriesName","name","Chart","useState","setDailyData","useEffect","fetchcedAPI","lineChart","length","height","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetcheyData","setState","fetchedData","this","image","src","CoronaImage","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e6e9c70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2I4S7\",\"card\":\"Cards_card__3r4X6\",\"infected\":\"Cards_infected__B5rqd\",\"recovered\":\"Cards_recovered__1z9Ol\",\"deaths\":\"Cards_deaths__3Y4D8\"};","import React from 'react';\r\nimport styles from './Cards.module.css';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n\r\nconst Cards = ({data : {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3}  justify='center' >\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Infected</Typography>\r\n                        <Typography variant=\"h5\" >\r\n                            <CountUp start={0} end={confirmed.value} duration={3} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" >Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Recovered</Typography>\r\n                        <Typography variant=\"h5\" >\r\n                        <CountUp start={0} end={recovered.value} duration={3} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" >Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Deaths</Typography>\r\n                        <Typography variant=\"h5\" >\r\n                        <CountUp start={0} end={deaths.value} duration={3} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" >Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios';\r\n\r\n\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const dataFetch = async (country) =>{\r\n    let changAbleUrl = url;\r\n\r\n    if(country){\r\n        changAbleUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const {data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changAbleUrl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport const dailyDataFetch = async () => {\r\n    try {\r\n        const { data } = await  axios.get(`${url}/daily`);\r\n\r\n        \r\n        const newDailyData =  data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n\r\n        }))\r\n\r\n        return newDailyData;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n\r\n        const countriesName = countries.map(country => country.name);\r\n\r\n        return countriesName;\r\n        \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport styles from './Chart.module.css';\r\nimport {dailyDataFetch} from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\n\r\n\r\n\r\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) => {\r\n\r\n    const [dailyData, setDailyData] =useState([]);\r\n\r\n    useEffect(() =>{\r\n        const fetchcedAPI = async () => {\r\n            setDailyData(await dailyDataFetch())\r\n        }\r\n\r\n        fetchcedAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length \r\n        ? (\r\n            <Line height=\"200px\"\r\n                data = {{\r\n                    labels: dailyData.map(({date}) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({confirmed}) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true\r\n                    }, {\r\n                        data: dailyData.map(({deaths}) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(250, 0, 0, 0.5)',\r\n                        fill: true\r\n                    }]\r\n                }}\r\n            />\r\n        ): null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ?(\r\n            <Bar \r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)'\r\n                        ],\r\n                        data:[confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {display:false},\r\n                    title: {display: true, text: `Current state in ${country}`},\r\n                }}\r\n            />\r\n        ) : null\r\n    );\r\n    \r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React, {useEffect, useState} from 'react';\r\nimport {NativeSelect , FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () =>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n\r\n    }, [setFetchedCountries]);\r\n\r\n    console.log(fetchedCountries);\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={styles.formControl} >\r\n                <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)} >\r\n                    <option value=\"\">Global</option>\r\n                    {fetchedCountries.map((country, i) => <option key={i} value={ country } >{country}</option>)}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React from 'react';\nimport styles from './App.module.css';\nimport {Cards, Chart, CountryPicker} from './components';\nimport {dataFetch} from './api';\nimport CoronaImage from './images/image.png';\n\n\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount () {\n    const fetchedData = await dataFetch();\n    this.setState({data: fetchedData});\n  }\n\n\n  handleCountryChange = async (country) => {\n    const fetcheyData = await  dataFetch(country);\n    this.setState({data: fetcheyData, country: country});\n    \n  }\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={CoronaImage} alt='COVID-19' />\n        <Cards data = { data }/>\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__hd4eJ\",\"image\":\"App_image__Q9sjt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__RrfrC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3rewg\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}